<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello</title>
    <url>/2020/05/08/hello/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>参数化</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2020/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="第一篇-概论"><a href="#第一篇-概论" class="headerlink" title="第一篇 概论"></a>第一篇 概论</h3>]]></content>
  </entry>
  <entry>
    <title>寻址方式</title>
    <url>/2020/05/25/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-立即数寻址"><a href="#1-立即数寻址" class="headerlink" title="1. 立即数寻址"></a>1. 立即数寻址</h2><p><code>操作码</code>字段后面的地址部分<u>即是操作数本身，数据包含在指令当中</u>，取出指令，也就取出了可以立即使用的<code>操作数</code>。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUB</span> S <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="meta">#1 ;R0←R0-1,并且影响标志位  </span></span><br><span class="line"><span class="keyword">ADD</span>   <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="meta">#0x3f ;R0←R0+0x3f</span></span><br></pre></td></tr></table></figure>

<h2 id="2-寄存器寻址"><a href="#2-寄存器寻址" class="headerlink" title="2. 寄存器寻址"></a>2. 寄存器寻址</h2><p><code>寄存器寻址</code>就是<u>利用寄存器中的数值作为操作数</u>。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">ADD <span class="keyword">R</span><span class="number">0</span>,<span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">2</span>   ;<span class="keyword">R</span><span class="number">0</span>←<span class="keyword">R</span><span class="number">1</span>+<span class="keyword">R</span><span class="number">2</span></span><br><span class="line">;将<span class="keyword">R</span><span class="number">1</span>和<span class="keyword">R</span><span class="number">2</span>的内容相加,结果存放在<span class="keyword">R</span><span class="number">0</span>中</span><br></pre></td></tr></table></figure>
<h2 id="3-寄存器移位寻址"><a href="#3-寄存器移位寻址" class="headerlink" title="3. 寄存器移位寻址"></a>3. 寄存器移位寻址</h2><p><code>寄存器移位寻址</code>是<code>ARM</code>指令集特有的寻址方式。当<strong>第二个操作数</strong>是寄存器方式时，<strong>第二个寄存器操作数</strong>在与<strong>第一个操作数</strong>结合之前，先进行移位操作。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">MOV <span class="keyword">R</span><span class="number">0</span>,<span class="keyword">R</span><span class="number">2</span>,LSL #<span class="number">3</span>  ;<span class="keyword">R</span><span class="number">2</span>的值左移<span class="number">3</span>位，结果放入<span class="keyword">R</span><span class="number">0</span></span><br><span class="line">ANDS <span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">2</span>,LSL <span class="keyword">R</span><span class="number">3</span>  ;<span class="keyword">R</span><span class="number">2</span>的值左移<span class="keyword">R</span><span class="number">3</span>位,然后和<span class="keyword">R</span><span class="number">1</span>相“与”,结果放入<span class="keyword">R</span><span class="number">1</span>中</span><br></pre></td></tr></table></figure>
<p><code>可采用的移位操作数如下:</code></p>
<blockquote>
<p><code>LSL</code>：<strong>逻辑左移</strong>，寄存器中的字的低端空出的位补零<br><code>LSR</code>：<strong>逻辑右移</strong>，寄存器中的字的高端空出的位补零<br><code>ASR</code>：<strong>算数右移</strong>，移位过程中保持符号位不变，若源操作数为正数，则字的高端空出的位补零，否则补1。<br><code>ROR</code>：<strong>循环右移</strong>，由字的低端溢出的位填入字的高端空出的位。<br><code>RRX</code>：<strong>带扩展的循环右移</strong>，操作数右移1位，高端空出的位用原C标志填充</p>
</blockquote>
<h2 id="4-寄存器间接寻址"><a href="#4-寄存器间接寻址" class="headerlink" title="4. 寄存器间接寻址"></a>4. 寄存器间接寻址</h2><p><code>寄存器间接寻址</code>指令中地址码给出的是一个通用寄存器的编号，所需的<code>操作数</code>保存在<u>寄存器指定地址单元</u>中，即<u>寄存器为操作数的地址指针</u>。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">LDR <span class="keyword">R</span><span class="number">1</span>,[<span class="keyword">R</span><span class="number">2</span>] ;将<span class="keyword">R</span><span class="number">2</span>指向的储存单元的数据读出，保存在<span class="keyword">R</span><span class="number">1</span>中</span><br><span class="line">SWP <span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">1</span>,[<span class="keyword">R</span><span class="number">2</span>] ;将寄存器<span class="keyword">R</span><span class="number">1</span>的值和<span class="keyword">R</span><span class="number">2</span>指定的储存单元的内容交换</span><br></pre></td></tr></table></figure>
<h2 id="5-基址变址寻址"><a href="#5-基址变址寻址" class="headerlink" title="5. 基址变址寻址"></a>5. 基址变址寻址</h2><p><code>基址变址寻址</code>就是将<strong>寄存器(该寄存器一般称作基址寄存器)的内容与指令中给出的地址偏移量相加</strong>，从而得到一个操作数的有效地址。变址寻址方式常用于访问某基地址附近的地址单元。采用变址寻址的指令常见的有以下几种形式：</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">LDR <span class="keyword">R</span><span class="number">0</span>,[<span class="keyword">R</span><span class="number">1</span>,#<span class="number">4</span>]  ;<span class="keyword">R</span><span class="number">0</span>←[<span class="keyword">R</span><span class="number">1</span>+<span class="number">4</span>]</span><br><span class="line">LDR <span class="keyword">R</span><span class="number">0</span>,[<span class="keyword">R</span><span class="number">1</span>,#<span class="number">4</span>]<span class="comment">! ;</span><span class="keyword">R</span><span class="number">0</span>←[<span class="keyword">R</span><span class="number">1</span>+<span class="number">4</span>],R1R←<span class="number">1</span>+<span class="number">4</span></span><br><span class="line">LDR <span class="keyword">R</span><span class="number">0</span>,[<span class="keyword">R</span><span class="number">1</span>],#<span class="number">4</span>  ;<span class="keyword">R</span><span class="number">0</span>←[<span class="keyword">R</span><span class="number">1</span>],<span class="keyword">R</span><span class="number">1</span>←<span class="keyword">R</span><span class="number">1</span>+<span class="number">4</span></span><br><span class="line">LDR <span class="keyword">R</span><span class="number">0</span>,[<span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">2</span>]  ;<span class="keyword">R</span><span class="number">0</span>←[<span class="keyword">R</span><span class="number">1</span>+<span class="keyword">R</span><span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>在第一条指令中</strong>，将寄存器R1的内容加上<code>4</code>形成操作数的有效地址，从该地址取得操作数存入寄存器器R0中。<br><strong>在第二条指令中</strong>，将寄存器R1的内容加上<code>4</code>形成操作数的有效地址，从该地址取得操作数存入寄存器R0中，然后,R1的内容自增四个字节。<br><strong>在第三条指令中</strong>，以寄存器R1的内容作为操作数的有效地址，从该地址取得操作数存入计算机R0中，然后,R1的内容自增<code>4</code>个字节。<br><strong>在第四条指令中</strong>，将寄存器R1的内容加上寄存器R2的内容，形成操作数的有效地址，从该地址取得操作数存入寄存器R0中。</p>
</blockquote>
<h2 id="6-多寄存器寻址"><a href="#6-多寄存器寻址" class="headerlink" title="6. 多寄存器寻址"></a>6. 多寄存器寻址</h2><p>采用<strong>多寄存器寻址方式</strong>，一条指令可以完成多个寄存器值的传送，这种寻址方式可以用一条指令完成传送送最多<code>16</code>个通用寄存器的值。</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">LDMIA <span class="keyword">R</span><span class="number">0</span>,&#123;<span class="keyword">R</span><span class="number">1</span>,<span class="keyword">R</span><span class="number">2</span>,<span class="keyword">R</span><span class="number">3</span>,<span class="keyword">R</span><span class="number">4</span>&#125; ;<span class="keyword">R</span><span class="number">1</span>←[<span class="keyword">R</span><span class="number">0</span>],<span class="keyword">R</span><span class="number">2</span>[<span class="keyword">R</span><span class="number">0</span>+<span class="number">4</span>],<span class="keyword">R</span><span class="number">3</span>[<span class="keyword">R</span><span class="number">0</span>+<span class="number">8</span>],<span class="keyword">R</span><span class="number">4</span>[<span class="keyword">R</span><span class="number">0</span>+<span class="number">12</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该指令的后缀<code>IA</code>表示在每次执行完加载/储存操作后，R0按字长度增加，因此，指令可将连续存储单元的值传送到R1~R4。</p>
</blockquote>
<h2 id="7-相对寻址"><a href="#7-相对寻址" class="headerlink" title="7. 相对寻址"></a>7. 相对寻址</h2><p>与<strong>基址变址寻址</strong>方式类似，<strong>相对寻址</strong>以程序计数器<code>PC</code>的当前值为基地址，指令中的地址标号作为<strong>偏移量</strong>，将两者相加之后得到的<strong>操作数</strong>作为有效地址。以下程序段完成子程序的调用和返回，跳转指令BL采用了相对寻址方式：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BL </span>NEXT  <span class="comment">;跳转到子程序NEXT处执行</span></span><br><span class="line"><span class="symbol">...</span></span><br><span class="line"><span class="symbol">NEXT</span> ...</span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">PC</span>,<span class="built_in">LR</span>   <span class="comment">;从子程序返回</span></span><br></pre></td></tr></table></figure>
<h2 id="8-堆栈寻址"><a href="#8-堆栈寻址" class="headerlink" title="8. 堆栈寻址"></a>8. 堆栈寻址</h2><p>堆栈是一种数据结构，按先进后出的方式工作，使用一个称作堆栈指针的专用寄存器指示当前的操作位置，堆栈指针总是指向栈顶。<br>当堆栈指针指向最后压入堆栈的数据时，称为满堆栈(<code>Full Stack</code>),而当堆栈指针指向下一个将要放入数据的空位置时，称为空堆栈(<code>Empty Stack</code>)。<br>同时，根据堆栈的生成方式，又可以分为递增堆栈(<code>Ascending Stack</code>)和递减堆栈(<code>Decending Stack</code>)。当堆栈由低地址向高地址生成时，称为递增堆栈;当堆栈由高地址向低地址生成时，称为递减堆栈。这样就有四种类型的堆栈工作方式，<code>ARM</code>微处理器支持这四种类型的堆栈工作方式。</p>
<blockquote>
<p><strong>满递增堆栈</strong>：堆栈指针指向最后压入的数据，且由<code>低地址向高地址生成</code>。<br><strong>满递减堆栈</strong>：堆栈指针指向最后压入的数据，且由<code>高地址向低地址生成</code>。<br><strong>空递增堆栈</strong>：堆栈指针指向下一个将要放入数据的空位置，且由<code>低地址向高地址生成</code>。<br><strong>空递减堆栈</strong>：堆栈指针指向下一个将要放入数据的空位置，且由<code>高地址向低地址生成</code>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
        <tag>嵌入式系统</tag>
      </tags>
  </entry>
</search>
